//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var History = newHistoryTable("", "HISTORY", "")

type historyTable struct {
	sqlite.Table

	// Columns
	ID         sqlite.ColumnInteger
	ExecutedAt sqlite.ColumnTimestamp
	Cmds       sqlite.ColumnString
	PaneCount  sqlite.ColumnInteger
	Wtcmd      sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type HistoryTable struct {
	historyTable

	EXCLUDED historyTable
}

// AS creates new HistoryTable with assigned alias
func (a HistoryTable) AS(alias string) *HistoryTable {
	return newHistoryTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new HistoryTable with assigned schema name
func (a HistoryTable) FromSchema(schemaName string) *HistoryTable {
	return newHistoryTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new HistoryTable with assigned table prefix
func (a HistoryTable) WithPrefix(prefix string) *HistoryTable {
	return newHistoryTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new HistoryTable with assigned table suffix
func (a HistoryTable) WithSuffix(suffix string) *HistoryTable {
	return newHistoryTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newHistoryTable(schemaName, tableName, alias string) *HistoryTable {
	return &HistoryTable{
		historyTable: newHistoryTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newHistoryTableImpl("", "excluded", ""),
	}
}

func newHistoryTableImpl(schemaName, tableName, alias string) historyTable {
	var (
		IDColumn         = sqlite.IntegerColumn("ID")
		ExecutedAtColumn = sqlite.TimestampColumn("EXECUTED_AT")
		CmdsColumn       = sqlite.StringColumn("CMDS")
		PaneCountColumn  = sqlite.IntegerColumn("PANE_COUNT")
		WtcmdColumn      = sqlite.StringColumn("WTCMD")
		allColumns       = sqlite.ColumnList{IDColumn, ExecutedAtColumn, CmdsColumn, PaneCountColumn, WtcmdColumn}
		mutableColumns   = sqlite.ColumnList{ExecutedAtColumn, CmdsColumn, PaneCountColumn, WtcmdColumn}
	)

	return historyTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		ExecutedAt: ExecutedAtColumn,
		Cmds:       CmdsColumn,
		PaneCount:  PaneCountColumn,
		Wtcmd:      WtcmdColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
